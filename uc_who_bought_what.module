<?php
// $Id:


/**
 * @uc_who_bought_what.module (dev 6 feb 2018)
 *
 * Displays a list of customers who have purchased a particular product in Ubercart.
 *
 * Adds an additional menu item to the Ubercart Reports, that lists the customers
 * who purchased certain products.  And totals, and show all records
 *
 * Copyright 2018 Michael Moradzadeh Cayenne.SF@gmail.com
 * Initial Backdrop 7.2 Migration Chris Amendola mrfreshly@gmail.com
 * Based on code from Ubercart project.
 * Released under GPL.
 */

/************
 *
 * Get an array of data and an array of headers
 *
 *************/

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function uc_who_bought_what_data($pid, $csv = false) {
  // check for the redeem module

  if (module_exists('redeem') ) {
    $redeem = TRUE;
  }
  else {
    $redeem = FALSE;
  }

  $header = array( //thanks to blackice78 for this code fix
    array(
      'data' => t('Qty'),
      'field' => 'qty',
      'sql_field' => "{uc_order_products}.qty",
    ),
    array(
      'data' => t('Rdm'),
      'field' => 'rdm',
      'sql_field' => "rr.rdm",
    ),
    array(
      'data' => t('LName'),
      'field' => 'lname',
      'sql_field' => "{uc_orders}.billing_last_name",
    ),
    array(
      'data' => t('FName'),
      'field' => 'fname',
      'sql_field' => "{uc_orders}.billing_first_name",
    ),
    array(
      'data' => t('Email'),
      'field' => 'email',
      'sql_field' => "{uc_orders}.primary_email",
    ),
    array(
      'data' => t('Phone'),
      'field' => 'phone',
      'sql_field' => "{uc_orders}.billing_phone",
    ),
    array(
      'data' => t('Price'),
      'field' => 'price',
      'sql_field' => "{uc_order_products}.price",
    ),
    array(
      'data' => t('Total'),
      'field' => 'total',
      'sql_field' => "({uc_order_products}}.price * {uc_order_products}.qty)",
    ),
    array(
      'data' => t('Date'),
      'field' => 'date',
      'sql_field' => "{uc_orders}.created",
    ),
    array(
      'data' => t('HowPay'),
      'field' => 'howpay',
      'sql_field' => "{uc_orders}.payment_method",
    ),
    array(
      'data' => t('Status'),
      'field' => 'status',
      'sql_field' => "{uc_orders}.order_status",
    ),
    array(
      'data' => t('id'),
      'field' => 'id',
      'sql_field' => "{uc_orders}.order_id",
    ),
    array(
      'data' => t('Model'),
      'field' => 'model',
      'sql_field' => "{uc_order_products}.model",
    ),
  );

  if (!$redeem) {
    unset($header[1]); // if not using redeem module, don't need this column.
  }

  //We are ready to collect the data
  $rows = array();

  $selects = array();
  foreach ($header as $item) {
    $selects[] = "{$item['sql_field']} AS {$item['field']}";
  }
  $selects[] = "{uc_order_products}.data AS opdata"; // get the line item data
  $selects[] = "{uc_orders}.uid AS uid ";

  if ($csv) {
    $selects[] = "{uc_order_products}.order_product_id AS line_id";
    $selects[] = "uccb.country_name AS bill_country";
    $selects[] = "uccs.country_name AS ship_country";
    $selects[] = "uccbz.zone_code AS bill_zone";
    $selects[] = "uccsz.zone_code AS ship_zone";

  }
  $sqsel = implode(',', $selects);

  //if($redeem) $sqsel .= ', redcount ';

  $sqsel .=   ", {uc_orders}.*, {uc_order_products}.data AS orderdata "; // this is to collect the raw attribute data and also not to have a comma at the end

  $sql = "SELECT  $sqsel FROM {uc_orders} " .
	  		 " JOIN {uc_order_products}" .
			 " ON {uc_order_products}.order_id = {uc_orders}.order_id " .
			 " AND {uc_order_products}.nid  =  :product_id " .
			 " LEFT JOIN {uc_countries} uccb ON {uc_orders}.billing_country = uccb.country_id " .
			 " LEFT JOIN {uc_countries} uccs ON {uc_orders}.delivery_country = uccs.country_id " .
 			 " LEFT JOIN {uc_zones} uccbz ON {uc_orders}.billing_country = uccbz.zone_country_id AND {uc_orders}.billing_zone = uccbz.zone_id " .
			 " LEFT JOIN {uc_zones} uccsz ON {uc_orders}.delivery_country = uccsz.zone_country_id AND {uc_orders}.delivery_zone = uccsz.zone_id "  ;
  if ($redeem) {
    $sql .= " LEFT JOIN (SELECT SUM(qty) AS rdm, opid FROM {redeem_redeemed} GROUP BY opid) rr ON rr.opid = {uc_order_products}.order_product_id ";
  }

  $sql .= " WHERE order_status <> 'in_checkout' AND order_status <> 'canceled' AND order_status <> 'abandoned' ";
  $customers = db_query($sql, array(":product_id" => $pid));

  if (module_exists('uc_attribute')) { //Attributes are very popular
    //Set a flag
    $attr = TRUE;
    // get the header values
    $attrheads = uc_who_bought_what_attrib_list($pid);

    foreach ($attrheads as $ahead => $order) {

      $header[] = array(
        'data' => $ahead,
        'field' => $ahead,
      ); // add the attributes in set order
    }
  }
  else {
    $attr = FALSE;
  }
  if ($csv) { //add csv files
    $csv_xtra = array(
      'delivery_first_name',
      'delivery_last_name',
      'delivery_phone',
      'delivery_company',
      'delivery_street1',
      'delivery_street2',
      'delivery_city',
      'ship_zone',
      'delivery_postal_code',
      'ship_country',
      'billing_first_name',
      'billing_last_name',
      'billing_phone',
      'billing_company',
      'billing_street1',
      'billing_street2',
      'billing_city',
      'bill_zone',
      'billing_postal_code',
      'bill_country',
    );
    foreach ($csv_xtra as $newhead) {
      $header[] = array(
        'data' => $newhead,
        'field' => $newhead,
      );
    }

  }

  $emails = array();
  while ($row = $customers->fetchAssoc()) {

    if ($attr) { // need to deserialize the attribs
      $data = unserialize($row['orderdata']);

      foreach ($data['attributes'] as $label => $atr) {
        $row[$label] = implode(',', $atr);
      }
    }
    $trow = array();
    foreach ($header as $head) {
      $trow[$head['data']] = isset($row[$head['field']]) ? $row[$head['field']] : null;
    }
    // now some special cleanups
    $trow['Date'] = strftime('%Y.%m.%d', $trow['Date']);
    $trow['Price'] = number_format($trow['Price'], 2);
    $trow['Total'] = number_format($trow['Total'], 2);
    if (!$csv) {
      $trow['id'] = l(("#" . $trow['id']), 'admin/store/orders/' . $trow['id']);
      $trow['Email'] = l(  check_plain($trow['Email']), 'mailto:' . $trow['Email']);

      $trow['FName'] = l(  check_plain($trow['FName']), 'user/' . $row['uid']);
      $trow['LName'] = l(  check_plain($trow['LName']), 'user/' . $row['uid']);
      $emails[] = $row['email'];
    }
    else {

    }
    $rows[] = $trow;

  }
  return array('header' => $header, 'rows' => $rows, 'emails' => $emails);
}


/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function uc_who_bought_what_attrib_list($nid) {
  $sql = "SELECT upa.`label`, ua.`name`, upa.`ordering` FROM {uc_product_attributes} upa
	       JOIN {uc_attributes} ua ON ua.aid = upa.aid WHERE nid = :nid ORDER BY `ordering`,`label`";
  $result = db_query($sql, array(':nid' => $nid));
  $list = array();
  while ($attr = $result->fetchAssoc()) {
    if ($attr['label'] == '<none>' || $attr['label'] == '') {
      $attr['label'] = $attr['name']; // use the field name for blanks
    }
    $list[$attr['label']] = $attr['ordering'];
  }
  return $list;
}


/****************
 * Sort table by values in $_GET
 *
 ****************/

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function uc_who_bought_what_array_sort(&$table) {
  //Is there a GET set?
  if (isset($_GET['order']) && $skey = $_GET['order']) {
    $skarray = array();
    foreach ($table as $val) {
      $skarray[] =  strip_tags(strtolower($val[$skey])); //eliminate sort anomalies from case
    }
    $sdir = $_GET['sort'];
    if ( strcmp($sdir, 'desc')) {
      $order = SORT_DESC;
    }
    else {
      $order = SORT_ASC;
    }
    array_multisort($skarray, $order,   $table);
  }
}


/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function uc_who_bought_what_report($nid = 0) {

  $product_id = (isset($_GET['pid'])) ? intval($_GET['pid']) : $nid;

  $csv = (isset($_GET['csv'])) ? TRUE : FALSE; //branch, depending on whether this is or is not a call for a .csv file
  // if a node was specified, it better be one you can look at!

  if ($product_id <= 0) {
    return backdrop_get_form('uc_who_bought_what_form');
  }

  if ($product_id >= 1) {
    $node = node_load($product_id);

    global $user;
    $output = "";
    if (!user_access('view all who bought what') && !(user_access('view own who bought what') && $node->uid == $user->uid) ) {
      backdrop_set_message('You are not authorized to view who bought that item.  Please contact your site or shop administrator', 'warning');
      return backdrop_access_denied();
    }

    $tql =	"SELECT COUNT({uc_order_products}.qty) AS ordcount, SUM({uc_order_products}.qty) AS grandtotal FROM {uc_order_products}" .
		" JOIN {uc_orders} ON {uc_order_products}.order_id = {uc_orders}.order_id " .
		" AND {uc_order_products}.nid  =  :product_id  WHERE order_status <> 'in_checkout' AND order_status <> 'canceled' AND order_status <> 'abandoned' ";

    $tquery = db_query($tql, array(':product_id' => $product_id));

    foreach ($tquery as $tresult) {
      $output .= '<h3>' . l($node->title, 'node/' . $node->nid) . " ($tresult->grandtotal sold in $tresult->ordcount orders)</h3>";
    }
    $vals = uc_who_bought_what_data($product_id, $csv);
    if (!$csv) { // regular output
      uc_who_bought_what_array_sort($vals['rows']);
      $output .= theme('table', array('header' => $vals['header'], 'rows' => $vals['rows'], 'sticky' => 1));
      $output .= l(t('Export ' . (sizeof($vals['rows'])) . ' rows to csv file'), "node/$product_id/buyers", array('query' => array('csv' => "TRUE")));

      $output .= '<div class="email-addresses"><h4>Email Addresses</h4><label for="email-addresses-textarea"
   	    value="Email addresses:" /><textarea id="email-addresses-textarea" rows="5" cols="100">' . implode('; ', $vals['emails']) . '</textarea></div>';
      return $output;
    }
    else { //csv output
      $csvheads = array();
      foreach ($vals['header'] as $head) {
        $csvheads[] = $head['data'];
      }
      backdrop_add_http_header('Content-Type', 'text/csv');
      backdrop_add_http_header('Content-Disposition', 'attachment; filename=' . 'who_bought_' . convert_to_filename($node->title) . '.csv');
      // create a file pointer connected to the output stream
      $output = fopen('php://output', 'w');
      // output the column headings
      fputcsv($output, $csvheads);
      // loop over the rows, outputting them
      foreach ($vals['rows'] as $row) {
        fputcsv($output, $row);
      }

      return;
    }

  }

} // function uc_who_bought_what_report



/*******************************************************************************
 * Callback Functions, Forms, and Tables
 ******************************************************************************/


/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function uc_who_bought_what_form($form, $form_state) {

  global $user;

  $listquery = "SELECT DISTINCT({uc_products}.nid) AS nid, {node}.title AS title, {uc_product_classes}.name AS type, {node}.status as status
    FROM {uc_products}
    INNER JOIN {node} ON {uc_products}.nid = {node}.nid
    LEFT JOIN {uc_product_classes} ON {uc_product_classes}.pcid = {node}.type";
  //		WHERE status = status";

  if (user_access('view all who bought what')) {
    $listquery .= ''; // do nothing. see all
  }
  else {
    if (user_access('view own who bought what')) {
      $listquery .= " WHERE {node}.uid = :uid";
    }
    backdrop_set_message("Only displaying reports for items posted by $user->name.");
  }

  $listquery .=  " ORDER BY {uc_product_classes}.name, {node}.title";

  $products = db_query($listquery, array(':uid' => $user->uid));

  $product_list[0] = t('Select an item...');

  foreach ($products as $product) {

    if ($product->type != NULL) {
      $type = $product->type;
    }
    else {
      $type = "Product";
    }
    $product_list[$type][$product->nid] =  $product->title;
  }

  $form['product_select'] = array(
    '#type' => 'select',
    '#title' => t('Choose a product'),
    '#options' => $product_list,
    '#description' => t('Choose a product.'),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  return $form;

} // function uc_who_bought_what_form



/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function uc_who_bought_what_form_validate($form, $form_values) {
  if ($form_values['values']['product_select'] == '0') {
    form_set_error('product_select', t('You must select a product.'));
  }
} // function uc_who_bought_what_validate


/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function uc_who_bought_what_form_submit($form, $form_values) {
  backdrop_goto("admin/store/reports/uc_who_bought_what", array('query' => array('pid' => $form_values['values']['product_select'])));
} // function uc_who_bought_what_form_submit



/*******************************************************************************
 * Module and Helper Functions
 ******************************************************************************/


/**
 * Valid permissions for this module
 * @return array An array of valid permissions for the uc_who_bought_what module
 */

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function uc_who_bought_what_permission() {
  return array(
    'view own who bought what' => array(
      'title' => t('View own who bought what'),
      'description' => t('Allow user to see sales of items they own'),
    ),
    'view all who bought what' => array(
      'title' => t('View all who bought what'),
      'description' => t('Allow users to access all sales of all items'),
    ),
  );
}


/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function uc_who_bought_what_menu() {

  $items = array();

  $items['admin/store/reports/uc_who_bought_what'] = array(
    'title' => 'Who Bought What',
    'description' => 'View reports of users who purchased specific products',
    'page callback' => 'uc_who_bought_what_report',
    'access arguments' => array('view own who bought what'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['node/%/buyers'] = array(
    'title' => 'Who Bought',
    'description' => 'View reports of users who purchased this product',
    'page callback' => 'uc_who_bought_what_report',
    'page arguments' => array(1),
    'access callback' => 'uc_who_bought_what_access_uc',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
} // function uc_who_bought_what_menu


/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function uc_who_bought_what_access_uc($nid) {
  $node = node_load($nid);
  if (uc_product_is_product($node)) {
    global $user;
    if ($user->uid == 1) {
      return TRUE;
    }
    if (user_access('view all who bought what', $user)) {
      return TRUE;
    }
    if ($node->uid == $user->uid && user_access('view own who bought what', $user)) {
      return TRUE;
    }

  }
  return FALSE;
}



//Needed to make it appear in admin menu. Not sure why we need this in this file and not others, but it works

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function uc_who_bought_what_admin_paths() {
  $paths = array(
    'node/*/buyers' => TRUE,
  );
  return $paths;
}


/**
 * Converts a string to a valid UNIX filename.
 * @param $string The filename to be converted
 * @return $string The filename converted
 */
function convert_to_filename($string) {

  // Replace spaces with underscores and makes the string lowercase
  $string = str_replace(" ", "_", $string);

  $string = str_replace("..", ".", $string);
  $string = strtolower($string);

  // Match any character that is not in our whitelist
  preg_match_all("/[^0-9^a-z^_^.]/", $string, $matches);

  // Loop through the matches with foreach
  foreach ($matches[0] as $value) {
    $string = str_replace($value, "", $string);
  }
  return $string;
}


/**
 * Display help and module information
 * @param path which path of the site we're displaying help
 * @param arg array that holds the current path as would be returned from arg() function
 * @return help text for the path
 */
function uc_who_bought_what_help($path, $arg) {
  $output = '';
  switch ($path) {
    case "admin/help#uc_who_bought_what":
      $output = '<p>' .  t("Displays list of users who purchased a product") . '</p>';
      break;
  }
  return $output;
} // function uc_who_bought_what_help
?>
